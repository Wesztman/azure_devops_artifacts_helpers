
name: Pipeline

on:
  push:
  pull_request:
  release:
    types: [published]

jobs:
  lint:
    name: Lint
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install tox
      - name: Lint
        run: tox -e lint

  test:
    name: Test Python ${{ matrix.py }} - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: false
      matrix:
        os:
          # - ubuntu
          - windows
          # - macos
        py: 
          - 3.6
          - 3.7
          - 3.8
      max-parallel: 4

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.py }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.py }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install tox
    - name: Setup Test Suite
      run: tox -e test -vv --notest
    - name: Run Test Suite
      run: tox -e test --skip-pkg-install
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        directory: ./reports/
        flags: tests
        name: ${{ matrix.py }} - ${{ matrix.os }}

  scan:
    if: github.event_name == 'pull_request' && contains(github.base_ref, 'master')

    name: Scan Licenses
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run FOSSA scan and upload build data
        uses: fossa-contrib/fossa-action@v1
        with:
          fossa-api-key: ${{ secrets.FOSSA_API_KEY }}
          github-token: ${{ github.token }}

  build:
    if: github.event_name == 'pull_request' && contains(github.base_ref, 'master')
    name: Build - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        os:
          # - ubuntu
          - windows
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.py }}
        uses: actions/setup-python@v2
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install tox

      - name: Build azure_devops_artifacts_helpers
        run: tox -e build

      - name: Archive build
        uses: actions/upload-artifact@v2
        with:
          name: build-${{ matrix.py }}
          path: |
            dist/*

  test_build:
    if: github.event_name == 'pull_request' && contains(github.base_ref, 'master')
    name: Test Build ${{ matrix.py }} - ${{ matrix.os }}
    needs:
      - build
      - test
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: false
      matrix:
        os:
          # - ubuntu
          - windows
          # - macos
        py: 
          - 3.6
          - 3.7
          - 3.8
      max-parallel: 4
    steps:
      - uses: actions/checkout@v2
        with:
          path: ./repo
      - name: Set up Python ${{ matrix.py }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.py }}
      - name: Download build
        uses: actions/download-artifact@v2
        with:
          name: build
      - shell: bash
        run: |
          pip install /dist/$(ls -t /dist/*.whl | head -n1)
          pip install -r ./repo/requirements.txt
          pip install tox pytest
      - shell: bash
        run: pytest ./repo/tests/functional

  publish:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    name: Publish
    runs-on: windows-latest
    needs: [lint, test, build, scan, test_build]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.py }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.py }}
      - name: Download build
        uses: actions/download-artifact@v2
        with:
          name: build
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install twine
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::$(python setup.py --version)
      - name:
        run: |
              twine upload dist/*
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
          TAG: ${{ steps.get_version.outputs.VERSION }}
        if: startsWith(github.ref, 'refs/tags')
  